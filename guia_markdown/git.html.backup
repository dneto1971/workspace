!html
                Git Commit Help

NAME
       git-commit - Grava alterações no repositório 
       
       SYNOPSIS
       git commit [-a | --interactive | --patch] [-s] [-v] [-u<mode>] [--amend]
                  [--dry-run] [(-c | -C | --squash) <commit> | --fixup [(amend|reword):]<commit>)]
                  [-F <file> | -m <msg>] [--reset-author] [--allow-empty]
                  [--allow-empty-message] [--no-verify] [-e] [--author=<author>]
                  [--date=<date>] [--cleanup=<mode>] [--[no-]status]
                  [-i | -o] [--pathspec-from-file=<file> [--pathspec-file-nul]]
                  [(--trailer <token>[(=|:)<value>])...] [-S[<keyid>]]
                  [--] [<pathspec>...]

DESCRIÇÃO

Crie um novo commit contendo o conteúdo atual do índice e a mensagem de log fornecida descrevendo as alterações. O novo commit é um filho direto de HEAD, geralmente a ponta do branch atual, e o branch é atualizado para apontar para ele (a menos que não branch está associado com a árvore de trabalho, neste caso HEAD é “desanexado” conforme descrito em git-checkout(1)). 

       O conteúdo a ser confirmado pode ser especificado de várias maneiras:

     1. usando git-add(1) para "adicionar" alterações incrementalmente ao índice antes de usar o comando commit (Nota: mesmo modificado os arquivos devem ser "adicionados");

     2. usando git-rm(1) para remover arquivos da árvore de trabalho e do índice, novamente antes de usar o comando commit;

     3. listando arquivos como argumentos para o comando commit (sem --interactive ou --patch switch), caso em que o commit irá ignorar as alterações feitas no índice e, em vez disso, gravará o conteúdo atual dos arquivos listados (que já devem ser conhecido pelo Git);

     4. usando a opção -a com o comando commit para "adicionar" automaticamente as alterações de todos os arquivos conhecidos (ou seja, todos os arquivos que já estão listados no índice) e automaticamente "rm" arquivos no índice que foram removidos do trabalho tree e, em seguida, execute o commit real;

     5. usando as opções --interactive ou --patch com o comando commit para decidir um por um quais arquivos ou blocos devem fazer parte do commit além do conteúdo no índice, antes de finalizar a operação.  Veja o “Modo Interativo” seção do git-add(1) para aprender como operar esses modos.

    A opção --dry-run pode ser usada para obter um resumo do que está incluído em qualquer um dos itens acima para o próximo commit, dando
    o mesmo conjunto de parâmetros (opções e caminhos).

    Se você fizer um commit e encontrar um erro imediatamente depois disso, poderá recuperá-lo com git reset.

OPÇÕES

	   -a, --all
        Diga ao comando para preparar automaticamente os arquivos que foram modificados e excluídos, mas os novos arquivos que você não informou ao Git
        sobre não são afetados.

    -p, --patch
        Use a interface interativa de seleção de patches para escolher quais alterações serão confirmadas.  Veja git-add(1) para detalhes.

    -C <commit>, --reuse-message=<commit>
        Pegue um objeto de confirmação existente e reutilize a mensagem de log e as informações de autoria (incluindo o carimbo de data/hora) quando
        criando o commit.

    -c <commit>, --reedit-message=<commit>
        Como -C, mas com -c o editor é invocado, para que o usuário possa editar ainda mais a mensagem de confirmação.

    --fixup=[(amend|reword):]<commit>
        Crie um novo commit que "corrige" <commit> quando aplicado com git rebase --autosquash.  Simples --fixup=<commit> cria
        um "conserto!"  commit que altera o conteúdo de <commit> mas deixa sua mensagem de log intocada.  --fixup=amend:<commit> é
        semelhante, mas cria uma "alteração!"  commit que também substitui a mensagem de log de <commit> pela mensagem de log do
        "alterar!"  comprometer-se.  --fixup=reword:<commit> cria uma "alteração!"  commit que substitui a mensagem de log de <commit> por seu
        própria mensagem de log, mas não faz alterações no conteúdo de <commit>.

        O commit criado por plain --fixup=<commit> tem um assunto composto por "fixup!"  seguido pela linha de assunto de
        <commit>, e é reconhecido especialmente pelo git rebase --autosquash.  A opção -m pode ser usada para complementar o log
        mensagem do commit criado, mas o comentário adicional será descartado assim que o "fixup!"  commit é esmagado
        em <commit> por git rebase --autosquash.

        O commit criado por --fixup=amend:<commit> é semelhante, mas seu assunto é prefixado com "amend!".  O registro
        mensagem de <commit> é copiada para a mensagem de log do "amend!"  commit e aberto em um editor para que possa ser refinado.
        Quando git rebase --autosquash esmaga o "amend!"  commit em <commit>, a mensagem de log de <commit> é substituída pelo
        mensagem de log refinada do "amend!"  comprometer-se.  É um erro para "alterar!"  a mensagem de log do commit esteja vazia, a menos que
        --allow-empty-message é especificado.

        --fixup=reword:<commit> é uma abreviação de --fixup=amend:<commit> --only.  Ele cria uma "alteração!"  commit com apenas um log
        mensagem (ignorando quaisquer alterações encenadas no índice).  Quando esmagado por git rebase --autosquash, ele substitui o log
        mensagem de <commit> sem fazer nenhuma outra alteração.

        Nem "consertar!"  nem "alterar!"  commits alteram a autoria de <commit> quando aplicado por git rebase --autosquash.  Veja gi-
        rebase(1) para detalhes.

    --squash=<commit>
        Construa uma mensagem de commit para uso com rebase --autosquash.  A linha de assunto da mensagem de confirmação é retirada do especificado
        commit com um prefixo de "squash!".  Pode ser usado com opções de mensagem de confirmação adicionais (-m/-c/-C/-F).  Veja git-rebase(1)
        para detalhes.

    --reset-author
        Quando usado com opções -C/-c/--amend, ou ao confirmar após uma escolha conflitante, declare que a autoria de
        o commit resultante agora pertence ao committer.  Isso também renova o carimbo de data/hora do autor.

    --short
        Ao fazer uma simulação, forneça a saída no formato curto.  Veja git-status(1) para detalhes.  Implica --dry-run.

    --branch
        Mostre a branch e as informações de rastreamento, mesmo em formato curto.

    --porcelain
        Ao fazer uma execução a seco, dê a saída em um formato pronto para porcelana.  Veja git-status(1) para detalhes.  Implica --dry-run.

    --long
        Ao fazer uma simulação, forneça a saída no formato longo.  Implica --dry-run.

    -z, --null
        Ao mostrar a saída de status curto ou porcelana, imprima o nome do arquivo literalmente e encerre as entradas com NUL, em vez disso
        de LF.  Se nenhum formato for fornecido, implica o formato de saída --porcelain.  Sem a opção -z, nomes de arquivos com "incomum"
        os caracteres são citados conforme explicado para a variável de configuração core.quotePath (veja git-config(1)).

    -F <arquivo>, --arquivo=<arquivo>
        Pegue a mensagem de confirmação do arquivo fornecido.  Use - para ler a mensagem da entrada padrão.

    --author=<author>
        Substitua o autor do commit.  Especifique um autor explícito usando o formato AU Thor <author@example.com> padrão.
        Caso contrário, assume-se que <author> é um padrão eéusado para procurar um commit existente desse autor (ie rev-list
        --all -i --autor=<autor>);  o autor do commit é então copiado do primeiro commit encontrado.

    --date=<date>
        Substitui a data do autor usada no commit.

    -m <msg>, --message=<msg>
        Use o <msg> fornecido como a mensagem de confirmação.  Se várias opções -m forem fornecidas, seus valores serão concatenados como parágrafos separados.

        A opção -m é mutuamente exclusiva com -c, -C e -F.

    -t <arquivo>, --template=<arquivo>
        Ao editar a mensagem de confirmação, inicie o editor com o conteúdo do arquivo fornecido.  A configuração commit.template
        A variável é frequentemente usada para fornecer essa opção implicitamente ao comando.  Este mecanismo pode ser usado por projetos que desejam
        orientar os participantes com algumas dicas sobre o que escrever na mensagem em que ordem.  Se o usuário sair do editor
        sem editar a mensagem, o commit é abortado.  Isso não tem efeito quando uma mensagem é dada por outros meios, por exemplo, com
        as opções -m ou -F.

    -s, --signoff, --no-signoff
        Adicione um trailer assinado pelo committer no final da mensagem de log de commit.  O significado de uma assinatura depende
        o projeto com o qual você está se comprometendo.  Por exemplo, pode certificar que o comitente tem o direito de submeter o trabalho
        sob a licença do projeto ou concorda com alguma representação do contribuidor, como um Certificado de Origem do Desenvolvedor.
        (Veja http://developercertificate.org para o usado pelo kernel Linux e projetos Git.) Consulte a documentação
        ou liderança do projeto para o qual você está contribuindo para entender como as aprovações são usadas nesse projeto.

        A opção --no-signoff pode ser usada para anular uma opção --signoff anterior na linha de comando.

    --trailer <token>[(=|:)<valor>]
        Especifique um par (<token>, <value>) que deve ser aplicado como trailer.  (por exemplo, git commit --trailer "Signed-off-by:CO
        Mitter \ <committer@example.com>" --trailer "Ajudado por:CO Mitter \ <committer@example.com>" adicionará o
        O trailer "Signed-off-by" e o trailer "Helped-by" para a mensagem de confirmação.) As variáveis ​​de configuração trailer.* (git-
        interpret-trailers(1)) pode ser usado para definir se um trailer duplicado é omitido, onde na execução de trailers cada
        trailer apareceria, e outros detalhes.

    -n, --[no-]verify
        Por padrão, os hooks pre-commit e commit-msg são executados.  Quando qualquer --no-verify ou -n é fornecido, eles são ignorados.  Ver
        também gitooks(5).

    --allow-empty(permitir-vazio)
        Normalmente gravar um commit que tem exatamente a mesma árvore que seu único commit pai é um erro, e o comando previne
        você de fazer tal compromisso.  Esta opção ignora a segurança e é principalmente para uso por interface SCM estrangeira
        roteiros.

    --allow-empty-message(permitir-mensagem vazia)
        Como --allow-empty este comando é principalmente para uso por scripts de interface SCM estrangeiros.  Ele permite que você crie um commit
        com uma mensagem de commit vazia sem usar comandos de encanamento como git-commit-tree(1).

    --cleanup=<modo>
        Esta opção determina como a mensagem de confirmação fornecida deve ser limpa antes da confirmação.  O <mode> pode ser strip,
        espaço em branco, verbatim, tesoura ou padrão.

        strip
            Tirar linhas vazias à esquerda e à direita, espaços em branco à direita, comentários e recolher linhas vazias consecutivas.

        whitespace
            Igual à tira, exceto que o #comentário não é removido.

        verbatim
            Não altere a mensagem de forma alguma.

        scissors
            O mesmo que espaço em branco, exceto que tudo (incluindo) a linha encontrada abaixo é truncado, se a mensagem for
            para ser editado.  "#" pode ser personalizado com core.commentChar.

                # ------------------------ >8 ----------------------- -

        default
            O mesmo que strip se a mensagem for editada.  Caso contrário, espaço em branco.

        O padrão pode ser alterado pela variável de configuração commit.cleanup (veja git-config(1)).

    -e, --edit
        A mensagem retirada do arquivo com -F, linha de comando com -m e do objeto de confirmação com -C geralmente são usadas como confirmação
        mensagem de log não modificada.  Esta opção permite editar ainda mais a mensagem extraída dessas fontes.

    --no-edit
        Use a mensagem de confirmação selecionada sem iniciar um editor.  Por exemplo, git commit --amend --no-edit altera um commit
        sem alterar sua mensagem de confirmação.

    --amend(alterar)
        Substitua a ponta do branch atual criando um novo commit.  A árvore gravada é preparada como de costume (incluindo o
        efeito das opções -i e -o e pathspec explícito), e a mensagem do commit original é usada como
        point, em vez de uma mensagem vazia, quando nenhuma outra mensagem é especificada na linha de comando por meio de opções como -m, -F,
        -c, etc. O novo commit tem os mesmos pais e autor que o atual (a opção --reset-author pode anular
        esta).

        É um equivalente aproximado para:

                    $ git reset --soft HEAD^
                    $ ... fazer outra coisa para chegar à árvore certa ...
                    $ git commit -c ORIG_HEAD

        mas pode ser usado para alterar um commit de merge.

        Você deve entender as implicações de reescrever o histórico se alterar um commit que já foi publicado.  (Ver
        a seção "RECOVERING FROM UPSTREAM REBASE" no git-rebase(1).)

    --no-post-rewrite(sem pós-reescrita)
        Ignore o gancho pós-reescrita.

    -i, --include
        Antes de fazer uma confirmação do conteúdo preparado até agora, prepare também o conteúdo dos caminhos fornecidos na linha de comando.
        Isso geralmente não é o que você deseja, a menos que esteja concluindo uma mesclagem conflitante.

    -o, --only
        Faça um commit pegando o conteúdo atualizado da árvore de trabalho dos caminhos especificados na linha de comando, desconsiderando qualquer
        conteúdos que foram encenados para outros caminhos.  Este é o modo padrão de operação do git commit se algum caminho for
        dado na linha de comando, neste caso esta opção pode ser omitida.  Se esta opção for especificada junto com --amend,
        então nenhum caminho precisa ser especificado, o que pode ser usado para alterar o último commit sem confirmar alterações que tenham sido
        já foi encenado.  Se usado junto com --allow-empty, os caminhos também não são necessários, e um commit vazio será
        criado.

    --pathspec-from-file=<arquivo>
        Pathspec é passado em <file> em vez de argumentos de linha de comando.  Se <file> for exatamente - então a entrada padrão será usada.  Pathspec
        os elementos são separados por LF ou CR/LF.  Os elementos Pathspec podem ser citados conforme explicado para a variável de configuração
        core.quotePath (veja git-config(1)).  Veja também --pathspec-file-nul e global --literal-pathspecs.

    --pathspec-file-nul
        Apenas significativo com --pathspec-from-file.  Os elementos Pathspec são separados com o caractere NUL e todos os outros caracteres
        são tomadas literalmente (incluindo novas linhas e aspas).

    -u[<mode>], --untracked-files[=<modo>]
        Mostrar arquivos não rastreados.

        O parâmetro mode é opcional (o padrão é all) e é usado para especificar o tratamento de arquivos não rastreados;  quando -u não é
        usado, o padrão é normal, ou seja, mostrar arquivos e diretórios não rastreados.

        As opções possíveis são:

        • no - não mostra arquivos não rastreados

        • normal - Mostra arquivos e diretórios não rastreados

        • all - também mostra arquivos individuais em diretórios não rastreados.

        O padrão pode ser alterado usando a variável de configuração status.showUntrackedFiles documentada em git-config(1).

    -v, --verbose
        Mostrar diferença unificada entre o commit HEAD e o que seria confirmado na parte inferior do modelo de mensagem de commit para
        ajude o usuário a descrever o commit lembrando quais mudanças o commit possui.  Observe que esta saída diff não tem seu
        linhas prefixadas com #.  Esta diferença não fará parte da mensagem de confirmação.  Veja a variável de configuração commit.verbose
        em git-config(1).

        Se especificado duas vezes, mostra também a diferença unificada entre o que seria submetido e os arquivos da árvore de trabalho, ou seja, o
        alterações não preparadas em arquivos rastreados.

    -q, --quiet
        Suprimir a mensagem de resumo do commit.

    --dry-run(funcionamento a seco)
        Não crie um commit, mas mostre uma lista de caminhos que serão submetidos, caminhos com alterações locais que serão deixadas
        não confirmados e caminhos que não são rastreados.

    --status
        Inclua a saída de git-status(1) no modelo de mensagem de confirmação ao usar um editor para preparar a mensagem de confirmação.
        O padrão é on, mas pode ser usado para substituir a variável de configuração commit.status.

    --no-status
        Não inclua a saída de git-status(1) no modelo de mensagem de confirmação ao usar um editor para preparar o padrão
        mensagem de confirmação.

    -S[<keyid>], --gpg-sign[=<keyid>], --no-gpg-sign
        Compromissos de assinatura GPG.  O argumento keyid é opcional e tem como padrão a identidade do committer;  se especificado, deve estar preso
        para a opção sem espaço.  --no-gpg-sign é útil para anular a variável de configuração commit.gpgSign e
        anterior --gpg-sign.

    --
        Não interprete mais argumentos como opções.

    <pathspec>...
        Quando pathspec é fornecido na linha de comando, confirme o conteúdo dos arquivos que correspondem ao pathspec sem gravar
        as alterações já adicionadas ao índice.  O conteúdo desses arquivos também é preparado para o próximo commit em cima do que
        já foram encenados antes.

        Para mais detalhes, veja a entrada pathspec no gitglossary(7).

EXEMPLOS

	Ao gravar seu próprio trabalho, o conteúdo dos arquivos modificados em sua árvore de trabalho é armazenado temporariamente em uma área de preparação
    chamado de "index" com git add.  Um arquivo pode ser revertido, apenas no índice, mas não na árvore de trabalho, para o arquivo do
    último commit com git restore --staged <file>, que efetivamente reverte git add e impede que as alterações neste arquivo
    participando do próximo commit.  Depois de construir o estado a ser confirmado de forma incremental com esses comandos, git commit
    (sem nenhum parâmetro de nome de caminho) é usado para registrar o que foi encenado até agora.  Esta é a forma mais básica do comando.
    Um exemplo:

        $ editar olá.c
        $ git rm adeus.c
        $ git add hello.c
        $ git commit

    Em vez de preparar os arquivos após cada alteração individual, você pode dizer ao git commit para observar as alterações nos arquivos cujos
    conteúdos são rastreados em sua árvore de trabalho e fazem git add e git rm correspondentes para você.  Ou seja, este exemplo faz o
    igual ao exemplo anterior, se não houver outra alteração em sua árvore de trabalho:

        $ editar olá.c
        $ rm adeus.c
        $ git commit -a

    O comando git commit -a primeiro olha para sua árvore de trabalho, percebe que você modificou hello.c e removeu adeus.c,
    e executa o git add e o git rm necessários para você.

    Depois de preparar as alterações em muitos arquivos, você pode alterar a ordem em que as alterações são gravadas, fornecendo nomes de caminho para git commit.
    Quando os nomes de caminho são fornecidos, o comando faz um commit que registra apenas as alterações feitas nos caminhos nomeados:

        $ editar olá.c olá.h
        $ git add hello.c hello.h
        $ editar Makefile
        $ git commit Makefile

    Isso faz um commit que registra a modificação no Makefile.  As alterações encenadas para hello.c e hello.h não estão incluídas
    no commit resultante.  No entanto, suas mudanças não são perdidas – elas ainda são encenadas e meramente retidas.  Após o acima
    seqüência, se você fizer:

        $ git commit

    este segundo commit registraria as mudanças em hello.c e hello.h como esperado.

    Depois que uma mesclagem (iniciada por git merge ou git pull) é interrompida devido a conflitos, os caminhos mesclados de forma limpa já estão preparados para serem
    cometidos para você, e os caminhos que entraram em conflito são deixados no estado não mesclado.  Você teria que primeiro verificar quais caminhos são
    em conflito com o status do git e depois de corrigi-los manualmente em sua árvore de trabalho, você prepararia o resultado como de costume com
    git adiciona:

        $ git status |  grep unmerged
        unmerged: hello.c
        $ editar olá.c
        $ git add hello.c

    Depois de resolver conflitos e preparar o resultado, git ls-files -u pararia de mencionar o caminho em conflito.  Quando você é
    feito, execute git commit para finalmente gravar a mesclagem:

        $ git commit

    Assim como no caso para gravar suas próprias alterações, você pode usar a opção -a para salvar a digitação.  Uma diferença é que durante uma fusão
    resolução, você não pode usar git commit com nomes de caminho para alterar a ordem em que as alterações são confirmadas, porque a mesclagem deve
    ser registrado como um único commit.  Na verdade, o comando se recusa a ser executado quando recebe nomes de caminho (mas veja a opção -i).

INFORMAÇÕES DO COMMIT
	
	As informações do autor e do committer são obtidas das seguintes variáveis ​​de ambiente, se configuradas:

        GIT_AUTHOR_NAME
        GIT_AUTHOR_EMAIL
        GIT_AUTHOR_DATE
        GIT_COMMITTER_NAME
        GIT_COMMITTER_EMAIL
        GIT_COMMITTER_DATE

    (nb "<", ">" e "\n"s são removidos)

    Os nomes do autor e do committer são, por convenção, alguma forma de nome pessoal (ou seja, o nome pelo qual outros humanos se referem
    para você), embora o Git não imponha ou exija nenhum formulário específico.  Unicode arbitrário pode ser usado, sujeito à
    restrições listadas acima.  Este nome não tem efeito na autenticação;  para isso, veja a variável credential.username no git-
    configuração(1).

    Caso (algumas) essas variáveis ​​de ambiente não estejam configuradas, as informações são retiradas dos itens de configuração user.name
    e user.email, ou, se não estiver presente, a variável de ambiente EMAIL, ou, se não estiver definido, o nome de usuário do sistema e o
    nome do host usado para e-mail de saída (retirado de /etc/mailname e retornando ao nome do host totalmente qualificado quando esse arquivo
    não existe).

    O author.name e o committer.name e suas opções de e-mail correspondentes substituem user.name e user.email se configurados e são
    substituídos pelas variáveis ​​de ambiente.

    O uso típico é definir apenas as variáveis ​​user.name e user.email;  as outras opções são fornecidas para uso mais complexo
    casos.

FORMATOS DE DATAS

	As variáveis ​​de ambiente GIT_AUTHOR_DATE e GIT_COMMITTER_DATE são compatíveis com os seguintes formatos de data:

    Formato interno do Git
        É <unix-timestamp> <time-zone-offset>, onde <unix-timestamp> é o número de segundos desde a época do UNIX.
        <time-zone-offset> é um deslocamento positivo ou negativo do UTC.  Por exemplo, CET (que está 1 hora à frente do UTC) é +0100.

    RFC 2822
        O formato de e-mail padrão conforme descrito pela RFC 2822, por exemplo Thu, 07 Apr 2005 22:13:13 +0200.

    ISO 8601
        Hora e data especificadas pelo padrão ISO 8601, por exemplo 2005-04-07T22:13:13.  O analisador aceita um espaço em vez de
        o caractere T também.  Partes fracionárias de um segundo serão ignoradas, por exemplo, 2005-04-07T22:13:13.019 será
        tratado como 2005-04-07T22:13:13.

            Observação
            Além disso, a parte da data é aceita nos seguintes formatos: AAAA.MM.DD, MM/DD/AAAA e DD.MM.AAAA.

    Além de reconhecer todos os formatos de data acima, a opção --date também tentará entender outros formatos mais
    formatos de data centrados no ser humano, como datas relativas como "ontem" ou "última sexta-feira ao meio-dia".

DISCUSSÃO

	Embora não seja obrigatório, é uma boa ideia começar a mensagem de confirmação com uma única linha curta (menos de 50 caracteres)
    resumindo a mudança, seguido por uma linha em branco e, em seguida, uma descrição mais completa.  O texto até a primeira linha em branco
    em uma mensagem de commit é tratado como o título do commit, e esse título é usado em todo o Git.  Por exemplo, git-format-patch(1)
    transforma um commit em e-mail e usa o título na linha Assunto e o restante do commit no corpo.

    O Git é até certo ponto agnóstico de codificação de caracteres.

    • O conteúdo dos objetos blob são sequências de bytes não interpretadas.  Não há tradução de codificação no núcleo
        nível.

    • Os nomes de caminho são codificados no formato C de normalização UTF-8. Isso se aplica a objetos de árvore, o arquivo de índice, nomes de referência, bem como
        como nomes de caminho em argumentos de linha de comando, variáveis ​​de ambiente e arquivos de configuração (.git/config (veja git-config(1)),
        gitignore(5), gitattributes(5) e gitmodules(5)).

        Observe que o Git no nível central trata os nomes de caminho simplesmente como sequências de bytes não NUL, não há codificação de nome de caminho
        conversões (exceto em Mac e Windows).  Portanto, usar nomes de caminho não ASCII funcionará principalmente mesmo em plataformas e
        sistemas de arquivos que usam codificações ASCII estendidas herdadas.  No entanto, os repositórios criados em tais sistemas não funcionarão
        corretamente em sistemas baseados em UTF-8 (por exemplo, Linux, Mac, Windows) e vice-versa.  Além disso, muitas ferramentas baseadas em Git simplesmente
        assumir nomes de caminho como UTF-8 e não exibirá outras codificações corretamente.

    • As mensagens de log de confirmação geralmente são codificadas em UTF-8, mas outras codificações ASCII estendidas também são suportadas.  Isso inclui
        ISO-8859-x, CP125x e muitos outros, mas não codificações multi-byte UTF-16/32, EBCDIC e CJK (GBK, Shift-JIS, Big5, EUC-x,
        CP9xx etc.).

    Embora encorajemos que as mensagens de log de confirmação sejam codificadas em UTF-8, tanto o core quanto o Git Porcelain são projetados para não
    forçar UTF-8 em projetos.  Se todos os participantes de um projeto específico acharem mais conveniente usar codificações legadas, o Git
    não o proíbe.  No entanto, há algumas coisas para manter em mente.

     1. git commit e git commit-tree emitem um aviso se a mensagem de log de commit fornecida a ele não parecer um UTF-8 válido
        string, a menos que você diga explicitamente que seu projeto usa uma codificação herdada.  A maneira de dizer isso é ter
        i18n.commitEncoding no arquivo .git/config, assim:

            [i18n]
                    commitEncoding = ISO-8859-1

        Os objetos de confirmação criados com a configuração acima registram o valor de i18n.commitEncoding em seu cabeçalho de codificação.  Isso é para
        ajudar outras pessoas que olham para eles mais tarde.  A falta desse cabeçalho implica que a mensagem de log de confirmação está codificada em UTF-8.

     2. git log, git show, git culpado e amigos olham para o cabeçalho de codificação de um objeto de confirmação e tentam recodificar o log
        mensagem em UTF-8, a menos que especificado de outra forma.  Você pode especificar a codificação de saída desejada com i18n.logOutputEncoding
        no arquivo .git/config, assim:

            [i18n]
                    logOutputEncoding = ISO-8859-1

        Se você não tiver essa variável de configuração, o valor de i18n.commitEncoding será usado.

    Observe que optamos deliberadamente por não recodificar a mensagem de log de confirmação quando uma confirmação é feita para forçar o UTF-8 na confirmação
    nível de objeto, porque a recodificação para UTF-8 não é necessariamente uma operação reversível.

VARIÁVEIS DE AMBIENTE E CONFIGURAÇÃO

       O editor usado para editar a mensagem de log do commit será escolhido a partir da variável de ambiente GIT_EDITOR, o core.editor
    variável de configuração, a variável de ambiente VISUAL ou a variável de ambiente EDITOR (nessa ordem).  Veja git-var(1)
    para detalhes.

HOOKS

      Este comando pode executar os ganchos commit-msg, prepare-commit-msg, pre-commit, post-commit e post-rewrite.  Veja gitooks(5) para
    Mais Informações.

FILES

       $GIT_DIR/COMMIT_EDITMSG
           Este arquivo contém a mensagem de confirmação de uma confirmação em andamento.  Se o git commit sair devido a um erro antes de criar um
        commit, qualquer mensagem de commit que tenha sido fornecida pelo usuário (por exemplo, em uma sessão do editor) estará disponível neste
        arquivo, mas será substituído pela próxima invocação de git commit.

SEE ALSO

       git-add(1), git-rm(1), git-mv(1), git-merge(1), git-commit-tree(1)

GIT

       Part of the git(1) suite
       Git 2.36.0                                                   	   04/18/2022                                                      	   GIT-COMMIT(1)
